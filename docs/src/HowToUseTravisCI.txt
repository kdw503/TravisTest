* Add Travis CI App

1. Create repository named 'TravisTest' in Guthub
    TravisTest 
          曲 README.md

2. git clone https://github.com/kdw503/TravisTest.git 
   at the julia package directory.

3. Create files in the local drive as below.
    TravisTest 
       曳 docs 
       早  曳 src
       早  早  曳 index.md
       早  早  曲 reference.md
       早  曳 make.jl
       早  曲 mkdocs.yml
       曳 src
       早  曲 TravisTest.jl
       曳 test
       早  曲 runtest.jl
       曳 .travis.yml
       曲 README.md

4. Install Travis CI GitHub App to the repository
    - Login to Travis CI site :
	https://travis-ci.com/profile/kdw503 (sign up if needed)
    - Click 'Manage repositories on GitHub' button beside the title
	'GitHub Apps Integration' in 'Repositories' tab.
      Then, it will connect to the 'Travis CI' page in 'Personal settings'
	page in my GitHub account.
    - Click 'Only select repositories' radio button in the
	'Repository access' item.
      And, choose the 'TravisTest' repository then save.

5. (deprecated) Install Travis CI service (If we did step 5, we don't need
     to do this step)
    - Go to the repository in the GitHub, click setting button and then
         choose 'Integration & service'.
    - Add service 'Travis CI' then fill in the blank. (But, GutHub says
         this is being deprecated)
         User : kdw503
         Token : go to Travis CI site, pick my profile and copy token
         Domain : https://notify.travis-ci.com

6. Pkg.test("TravisTest")
     - If the test passed,go to step 7

7. Push the local commit to the master branch in the repository.
   - This push will run the Travis CI script.
   - We can check the progress in Travis CI site.


* Using 'Documenter' in the Travis CI (after adding Travis CI App)

Each time you push new updates to your master branch of a package repository, the following will happen.
- travis buildbots startup and run your tests;
- each buildbot will build the package docs using your docs/make.jl script
- a single buildbot will then try to push the generated docs back to
   GitHub.

1. SSH Deploy Keys : Deploy keys provide push access to a 'single'
    repository, to allow secure deployment of generated documentation from
    Travis to GitHub.
    - Make sure that 'which', 'git', and 'ssh-keygen' is installed.
    - julia> using Documenter
    - julia> Travis.genkeys("TravisTest")
              Info: add the public key below to https://github.com/kdw503....
              keys with read/write access:

              [SSH PUBLIC KEY HERE]
              ex) ssh-rsa AAAAB3NzaC1yc.....tCxaJiun kdw@kdw-asus

              Info: add a secure environment variable named ....

              [LONG BASE64 ENCODED PRIVATE KEY]
              ex) LS0tLS......S0tLQo=         
    - Add the public ssh key to the settings page for the GitHub repository
         go to https://github.com/kdw503/TravisTest/settings/keys
         and add the public key by clicking the 'Add deply key' button
              Title : documenter
              Key : ssh-rsa AAAAB3NzaC1yc.....tCxaJiun kdw@kdw-asus
              check 'Allow write access'
    - Add the long private key to the Travis settings page.
              Environment Variables section add a key with the name
                      DOCUMENTER_KEY. Do not set the variable to be displayed.
    * When adding the RSA host key, if Travis ask passphrash, regenerate
        the keys in the linux and put the keys to GitHub and Travis CI
        instead.(or may use other 'ssh-keygen' program)

2. .travis.yml Configuration : Add follow lines in the file.
    after_success:
     - julia -e 'Pkg.add("Documenter")'
     - julia -e 'cd(Pkg.dir("TravisTest")); include(joinpath("docs",
         "make.jl"))'

3. Edit docs/make.jl
    using Documenter, TravisTest
    makedocs()
    deploydocs(
        deps   = Deps.pip("mkdocs", "python-markdown-math"),
        repo = "github.com/kdw503/TravisTest.jl.git",
        julia = "0.6",
        osname = "linux" # Don't need to specify. Linux is a default os.
    )
   * The mandatory julia keyword argument specifies the julia version.
     This must be one from the julia: section of the .travis.yml.
   * The example above includes the dependencies mkdocs and
         python-markdown-math.The former makes sure that MkDocs is installed
        to deploy the documentation.And, the latter provides the mdx_math
        markdown extension for rendering of latex equations.(need step 4)

4. Edit docs/mkdocs.yml, if using MkDOcs to convert the markdown files
     generated by Documenter to HTML.

5. Edit .gitignore
    docs/build/
    docs/site/

6. gh-pages Branch
    By default, Documenter pushes documentation to the gh-pages branch. 
    If the branch does not exist it will be created automatically by deploydocs. 
    * If error happen when creating the 'gh-pages' directory, ignore this?
      Checking out gh-pages failed with error: ErrorException("failed process: Process(`git checkout -b gh-pages upstream/gh-pages`, ProcessExited(128)) [128]")

7. Add badges in the README.md
   If documents are generated from master branch
        [![](https://img.shields.io/badge/docs-latest-blue.svg)]
                (https://kdw503.github.io/TravisTest.jl/latest)
   if documents are generated from tagged branch
        [![](https://img.shields.io/badge/docs-stable-blue.svg)]
                (https://kdw503.github.io/TravisTest.jl/stable)




* Add AppVeyor (Continuous Integration solution for Windows and Linux)
https://www.appveyor.com/


* Add Codecov (Empower developers with tools to improve code quality and testing.)
https://codecov.io/
https://github.com/codecov


** What is CI?
Continuous Integration is the practice of merging in small code changes frequently - rather than merging in a large change at the end of a development cycle. The goal is to build healthier software by developing and testing in smaller increments.

* Travis CI (CI for Mac and Linux?)
- Travis CI supports your development process by auto matically building, testing, deployments and notification.
- When you run a build, Travis CI clones your GitHub repository into a brand new virtual environment, and carries out a series of tasks to build and test your code. 
- Terms : job(composed of a series of phases), phase(install phase, script phase, deploy phase), build(might have several jobs, each of which tests a project with a different version of a programming language), stage(a group of jobs that run in parallel)
